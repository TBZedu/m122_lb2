.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "git-extract-commits" "1" "July 2022" "git-extract-commits 0.0.2" ""
.hy
.SH NAME
.PP
git-extract-commits, Collect Git commits information.
.SH SYNOPSIS
.PP
\f[B]git_extract_commits.bash\f[R] \f[I]BASE-DIRECTORY\f[R] \f[I][-o
OUTPUT-FILE]\f[R] \f[I][ARGUMENTS]\f[R]
.SH DESCRIPTION
.PP
\f[B]git_extract_commits.bash\f[R] scans a \f[I]BASE-DIRECTORY\f[R] for
git repositories and collects information about the commit history into
a CSV \f[I]OUTPUT-FILE\f[R].
.PP
If the \f[B]-h|\[en]help\f[R] or \f[B]\[en]version\f[R] flags are set,
the program will immediately exit after printing the help or version
information.
(Depending on which flag is encountered first.)
.SH BASE-DIRECTORY
.PP
The base directory must be a directory containing multiple git
repositories as subdirectories.
Git repositories are only searched one level deep.
Directories not containing a \f[V].git\f[R] (or whatever is returned by
\f[V]git rev-parse --git-dir\f[R]), are ignored.
.SH OUTPUT-FILE
.PP
Collected commit information is stored in CSV format, per default into
\f[V]commits.csv\f[R].
A custom file location and name can be specified by setting the
\f[B]-o\f[R] flag.
.PP
The CSV has the following format:
.PP
\f[V]Zielverzeichnis,Datum,Commit-Hash,Author\f[R]
.PP
Always with this first line as the header.
.SH OPTIONS
.TP
\f[B]-h\f[R], \f[B]\[en]help\f[R]
Display help information and exit immediately.
.TP
\f[B]\[en]version\f[R]
Display version and exit immediately.
.TP
\f[B]\[en]config \f[BI]FILE\f[B]\f[R]
Read configuration from \f[I]FILE\f[R].
.TP
\f[B]-v \f[BI][(D|I|W|E)]\f[B]\f[R], \f[B]\[en]verbose \f[BI][(D|I|W|E)]\f[B]\f[R]
Verbosity level, if no level provided, \f[I]D\f[R] is used.
.TP
\f[B]-o \f[BI]FILE\f[B]\f[R], \f[B]\[en]output \f[BI]FILE\f[B]\f[R]
Write output to \f[I]FILE\f[R].
.TP
\f[B]\[en]overwrite \f[BI](Yes,Ask,No)\f[B]\f[R]
Behavior in case output file already exists.
.SH EXAMPLES
.TP
\f[B]git_extract_commits.bash -h\f[R]
Display help and exit.
.TP
\f[B]git_extract_commits.bash \[en]version\f[R]
Display version and exit.
.TP
\f[B]git_extract_commits.bash \[ti]/code\f[R]
Collect commit information from all repositories located in
\f[I]\[ti]/code\f[R].
.TP
\f[B]git_extract_commits.bash \[ti]/code -v\f[R]
Enable debug mode, verbose logging.
.TP
\f[B]git_extract_commits.bash \[ti]/code -o /tmp/data.csv\f[R]
Save commit data to \f[I]/tmp/data.csv\f[R].
.SH EXIT VALUES
.TP
\f[B]0\f[R]
Success
.TP
\f[B]1\f[R]
Invalid or missing arguments
.TP
\f[B]255\f[R]
Other error
.SH BUGS
.PP
My software has no bugs.
It develops random features.
.SH AUTHORS
Colin van Loo.
